{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  currentConversation: [],\n  pastConversations: [{\n    data: [{\n      type: \"question\",\n      id: 10,\n      question: \"Hello! How are you?\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      type: \"answer\",\n      id: 11,\n      question: \"I am Good.\",\n      time: new Date().toLocaleTimeString(),\n      reaction: \"like\"\n    }, {\n      type: \"question\",\n      id: 15,\n      question: \"What are you doing?\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      type: \"answer\",\n      id: 19,\n      question: \"Just listning song\",\n      time: new Date().toLocaleTimeString(),\n      reaction: \"like\"\n    }],\n    feedback: \"Excellent! Thank you\",\n    rating: 4\n  }, {\n    data: [{\n      type: \"question\",\n      id: 10,\n      question: \"Hi! Can you help me out here\",\n      time: new Date().toLocaleTimeString()\n    }, {\n      type: \"answer\",\n      id: 11,\n      question: \"As a AI language model. I can not helop you out.\",\n      time: new Date().toLocaleTimeString(),\n      reaction: \"dislike\"\n    }],\n    feedback: \"Bad!\",\n    rating: 1\n  }],\n  customizedResponses: [],\n  isTyping: false\n};\nconst chatSlice = createSlice({\n  name: \"chats\",\n  initialState,\n  reducers: {\n    setResponses(state, action) {\n      state.customizedResponses = action.payload;\n    },\n    askQuestion(state, action) {\n      state.isTyping = true;\n      state.currentConversation.push({\n        type: \"question\",\n        id: state.currentConversation.length + 1,\n        question: action.payload,\n        time: new Date().toLocaleTimeString()\n      });\n    },\n    aiBotResponse(state, action) {\n      state.currentConversation.push({\n        type: \"answer\",\n        id: state.currentConversation.length + 1,\n        question: action.payload,\n        time: new Date().toLocaleTimeString(),\n        reaction: \"\"\n      });\n      state.isTyping = false;\n    },\n    saveCurrentConversation(state, action) {\n      state.pastConversations = [...state.pastConversations, {\n        data: state.currentConversation,\n        feedback: action.payload.userFeedback,\n        rating: action.payload.userRating\n      }];\n      state.currentConversation = [];\n    },\n    newChat(state, action) {\n      state.currentConversation = [];\n    },\n    messageLike(state, action) {\n      state.currentConversation[action.payload - 1] = {\n        ...state.currentConversation[action.payload - 1],\n        reaction: \"like\"\n      };\n    },\n    messageDisLike(state, action) {\n      state.currentConversation[action.payload - 1] = {\n        ...state.currentConversation[action.payload - 1],\n        reaction: \"dislike\"\n      };\n    }\n  }\n});\nexport const {\n  askQuestion,\n  setResponses,\n  aiBotResponse,\n  saveCurrentConversation,\n  newChat,\n  messageLike,\n  messageDisLike\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentConversation","pastConversations","data","type","id","question","time","Date","toLocaleTimeString","reaction","feedback","rating","customizedResponses","isTyping","chatSlice","name","reducers","setResponses","state","action","payload","askQuestion","push","length","aiBotResponse","saveCurrentConversation","userFeedback","userRating","newChat","messageLike","messageDisLike","actions","reducer"],"sources":["/home/asif/Music/JAVA/ai-chat-bot-master/src/redux/chatSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  currentConversation: [],\n  pastConversations: [\n    {\n      data: [\n        {\n          type: \"question\",\n          id: 10,\n          question: \"Hello! How are you?\",\n          time: new Date().toLocaleTimeString(),\n        },\n\n        {\n          type: \"answer\",\n          id: 11,\n          question: \"I am Good.\",\n          time: new Date().toLocaleTimeString(),\n          reaction: \"like\",\n        },\n        {\n          type: \"question\",\n          id: 15,\n          question: \"What are you doing?\",\n          time: new Date().toLocaleTimeString(),\n        },\n        {\n          type: \"answer\",\n          id: 19,\n          question: \"Just listning song\",\n          time: new Date().toLocaleTimeString(),\n          reaction: \"like\",\n        },\n      ],\n      feedback: \"Excellent! Thank you\",\n      rating: 4,\n    },\n    {\n      data: [\n        {\n          type: \"question\",\n          id: 10,\n          question: \"Hi! Can you help me out here\",\n          time: new Date().toLocaleTimeString(),\n        },\n\n        {\n          type: \"answer\",\n          id: 11,\n          question: \"As a AI language model. I can not helop you out.\",\n          time: new Date().toLocaleTimeString(),\n          reaction: \"dislike\",\n        },\n      ],\n      feedback: \"Bad!\",\n      rating: 1,\n    },\n  ],\n  customizedResponses: [],\n  isTyping: false,\n};\n\nconst chatSlice = createSlice({\n  name: \"chats\",\n  initialState,\n  reducers: {\n    setResponses(state, action) {\n      state.customizedResponses = action.payload;\n    },\n    askQuestion(state, action) {\n      state.isTyping = true;\n      state.currentConversation.push({\n        type: \"question\",\n        id: state.currentConversation.length + 1,\n        question: action.payload,\n        time: new Date().toLocaleTimeString(),\n      });\n    },\n    aiBotResponse(state, action) {\n      state.currentConversation.push({\n        type: \"answer\",\n        id: state.currentConversation.length + 1,\n        question: action.payload,\n        time: new Date().toLocaleTimeString(),\n        reaction: \"\",\n      });\n      state.isTyping = false;\n    },\n    saveCurrentConversation(state, action) {\n      state.pastConversations = [\n        ...state.pastConversations,\n        {\n          data: state.currentConversation,\n          feedback: action.payload.userFeedback,\n          rating: action.payload.userRating,\n        },\n      ];\n      state.currentConversation = [];\n    },\n    newChat(state, action) {\n      state.currentConversation = [];\n    },\n    messageLike(state, action) {\n      state.currentConversation[action.payload - 1] = {\n        ...state.currentConversation[action.payload - 1],\n        reaction: \"like\",\n      };\n    },\n    messageDisLike(state, action) {\n      state.currentConversation[action.payload - 1] = {\n        ...state.currentConversation[action.payload - 1],\n        reaction: \"dislike\",\n      };\n    },\n  },\n});\n\nexport const {\n  askQuestion,\n  setResponses,\n  aiBotResponse,\n  saveCurrentConversation,\n  newChat,\n  messageLike,\n  messageDisLike,\n} = chatSlice.actions;\n\nexport default chatSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}